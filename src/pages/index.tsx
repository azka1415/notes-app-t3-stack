import type { ShoppingItem } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import ItemModal from "../components/ItemModal";

import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const [items, setItems] = useState<ShoppingItem[]>([])
  const [open, setopen] = useState(false)
  const [checkItems, setCheckItems] = useState<ShoppingItem[]>([])
  const itemDelete = trpc.shoppingList.deleteItem.useMutation()
  const updateCheck = trpc.shoppingList.checkItem.useMutation()

  const result = trpc.shoppingList.getItems.useQuery()
  useEffect(() => {
    if (result.data) {
      setItems(result.data)
      result.refetch()
      return () => setItems([])
    }
    return () => setItems([])
  }, [result.data, result])

  const handleDelete = (id: string) => {
    itemDelete.mutate({ text: id }, {
      onSuccess(data) {
        setItems((prev) => prev.filter((item) => item.id !== data.id))
      },
    })
  }

  const handleChecked = (id: string, check: boolean) => {
    updateCheck.mutate({ text: id, check }, {
      onSuccess(data) {
        if (checkItems.some((item) => item.id === data.id)) {
          setCheckItems((prev) => prev.filter((item) => item.id !== data.id))
        }
        else {
          setCheckItems((prev) => [...prev, data])
        }
      },
    })
  }
  if (!result.data || result.isLoading) return <p>Loading...</p>


  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex my-10 max-w-3xl mx-2">

        {open && <ItemModal open={setopen} setItems={setItems} />}

        <main className="">
          <div className="flex space-x-4">
            <h2 className="text-2xl font-semibold">My Shopping List</h2>
            <button className="bg-violet-500 text-sm p-2 rounded-md text-white transition hover:bg-violet-600"
              onClick={() => setopen(true)}>Add shopping item</button>
          </div>

          <ul className="space-y-6 my-2 w-auto">
            {items.sort((a, b) => {
              const one = new Date(b.updatedAt).getTime()
              const two = new Date(a.updatedAt).getTime()
              return one - two
            }).map(item => (
              <li key={item.id} className='flex space-x-4 jutify-start items-center text-center'>
                <Link href={`/notes/${item.id}`}>
                  <p className="cursor-pointer">{item.name}</p>
                </Link>
                {item.checked === true ? (
                  <input type="checkbox" checked={true} className='p-1 rounded-lg bg-green-600' />
                ) : null}
                <p>Created: {new Date(item.createdAt).toLocaleString()}</p>
                {new Date(item.updatedAt).toLocaleString() === new Date(item.createdAt).toLocaleString() ? null :
                  (<p>Updated: {new Date(item.updatedAt).toLocaleString()}</p>)
                }
                {item.checked === false ?
                  (<button onClick={() => handleChecked(item.id, true)} className='bg-green-600 text-white rounded-lg p-2'>Check</button>) :
                  (<button onClick={() => handleChecked(item.id, false)} className='bg-green-600 text-white rounded-lg p-2'>Uncheck</button>)}
                <button
                  onClick={() => handleDelete(item.id)} className='bg-red-600 p-2 rounded-lg text-white transition-all hover:bg-red-700'>Delete</button>
              </li>

            ))}
          </ul>

        </main>
      </div>
    </>
  );
};

export default Home;
